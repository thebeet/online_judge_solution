package main

import "fmt"

var P int64 = 1000000007
var N int = 12

func matMul(mat1, mat2 [][]int64) [][]int64 {
	result := make([][]int64, N)
	for i := range N {
		result[i] = make([]int64, N)
		for j := range N {
			for k := range N {
				result[i][j] += mat1[i][k] * mat2[k][j]
			}
			result[i][j] %= P
		}
	}
	return result
}

func numOfWays(n int) int {
	mat := [][]int64{
		{0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0},
		{0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0},
		{0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1},
		{0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},

		{1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
		{0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1},
		{1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},

		{1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
	}

	ans := [][]int64{
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	}

	t := n - 1

	for t > 0 {
		if t&1 == 1 {
			ans = matMul(ans, mat)
		}
		mat = matMul(mat, mat)
		t = t >> 1
	}
	count := int64(0)
	for i := range N {
		for j := range N {
			count += ans[i][j]
		}
	}
	return int(count % P)
}

func main() {
	fmt.Println(numOfWays(1))
}
